name: Spring Boot CI/CD
env:
 PROJECT_NAME: "turtle-playground"
on:
 push:
   branches: [ "main" ]
 pull_request:
   branches: [ "main" ]

jobs:
 build:
   runs-on: ubuntu-latest
   steps:
     - uses: actions/checkout@v3
     
     - name: Set up JDK 17
       uses: actions/setup-java@v3
       with:
         java-version: '17'
         distribution: 'temurin'
         
     - name: Add profiles
       run: |
         mkdir -p src/main/resources
         cd src/main/resources  
         echo "${{ secrets.APPLICATION_YAML}}" > application.yaml
         echo "${{ secrets.APPLICATION_COMMON_YAML}}" > application-common.yaml
         echo "${{ secrets.APPLICATION_PROD_YAML}}" > application-prod.yaml
         echo "${{ secrets.APPLICATION_TEST_YAML}}" > application-test.yaml

     # deploy.sh 생성 - zip에 포함되어야 함
     - name: Create deploy.sh
       run: |
         echo "${{ secrets.DEPLOY_SH }}" | base64 --decode > deploy.sh
         chmod +x deploy.sh
         ls -la deploy.sh  # 파일 생성 확인
         
     - name: Gradle Build
       run: |
         chmod +x gradlew
         ./gradlew build -x test

     - name: Docker Login & Push
       uses: docker/login-action@v3
       with:
         username: ${{ secrets.DOCKER_USERNAME }}
         password: ${{ secrets.DOCKER_PASSWORD }}

     - name: Build and push Docker image
       uses: docker/build-push-action@v4
       with:
         context: .
         push: true
         tags: ${{ secrets.DOCKER_REPO }}/turtle-playground-spring-boot-app:latest

     - name: Make zip file
       run: zip -r ./$PROJECT_NAME.zip .
       shell: bash
     
     - name: Configure AWS credentials
       uses: aws-actions/configure-aws-credentials@v1
       with:
         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
         aws-region: ${{ secrets.AWS_REGION }}
         
     - name: Upload to S3
       run: aws s3 cp ./$PROJECT_NAME.zip s3://${{ secrets.S3_BUCKET_NAME }}/deploy/$PROJECT_NAME.zip

     - name: Deploy with AWS CodeDeploy
       run: >
         aws deploy create-deployment 
           --application-name ${{ secrets.CODE_DEPLOY_APP }} 
           --deployment-config-name CodeDeployDefault.AllAtOnce 
           --deployment-group-name ${{ secrets.CODE_DEPLOY_DEPLOYMENT_GROUP }} 
           --s3-location bucket=${{ secrets.S3_BUCKET_NAME }},bundleType=zip,key=deploy/$PROJECT_NAME.zip
